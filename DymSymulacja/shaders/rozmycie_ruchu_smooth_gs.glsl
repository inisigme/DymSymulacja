//////////////////////////////////////////////////////////////////////
// (c) Janusz Ganczarski
// http://www.januszg.hg.pl
// JanuszG@enter.net.pl
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// GLSL 4.10
//////////////////////////////////////////////////////////////////////
#version 410

//////////////////////////////////////////////////////////////////////
// liczba warstw renderingu
//////////////////////////////////////////////////////////////////////
#define FRAME_LAYERS 16

//////////////////////////////////////////////////////////////////////
// liczba wierzcho�k�w prymitywu wej�ciowego i wyj�ciowego
//////////////////////////////////////////////////////////////////////
#define MAX_VERTICES 3

//////////////////////////////////////////////////////////////////////
// prymityw wej�ciowy, liczba wywo�a� shadera
//////////////////////////////////////////////////////////////////////
layout( triangles, invocations = FRAME_LAYERS ) in;

//////////////////////////////////////////////////////////////////////
// prymityw wyj�ciowy
//////////////////////////////////////////////////////////////////////
layout( triangle_strip, max_vertices = MAX_VERTICES ) out;

//////////////////////////////////////////////////////////////////////
// iloczyn macierzy modelu-widoku i macierzy rzutowania
//////////////////////////////////////////////////////////////////////
uniform mat4 modelViewProjectionMatrix[FRAME_LAYERS];

//////////////////////////////////////////////////////////////////////
// tablica blok�w zmiennych wej�ciowych
//////////////////////////////////////////////////////////////////////
in Vertex
{
    vec4 color;     // kolor wierzcho�ka
} In[MAX_VERTICES];

//////////////////////////////////////////////////////////////////////
// blok zmiennych wyj�ciowych
//////////////////////////////////////////////////////////////////////
out Vertex
{
    vec4 color;     // kolor wierzcho�ka do interpolacji
} Out;

//////////////////////////////////////////////////////////////////////
// program g��wny
//////////////////////////////////////////////////////////////////////
void main ()
{
    // numer kolejnej warstwy = numer wywo�ania shadera
    gl_Layer = gl_InvocationID;

    // generowanie kolejnych wierzcho�k�w prymitywu
    for( int v = 0; v < gl_in.length(); v++ )
    {
        // standardowe przekszta�cenie wsp��rz�dnych wierzcho�k�w
        gl_Position = modelViewProjectionMatrix[gl_InvocationID] * gl_in[v].gl_Position;

        // numer obszaru renderingu
        gl_ViewportIndex = 1;

        // atrybuty wierzcho�ka
        Out.color = In[v].color;
        EmitVertex();
    }

    // koniec prymitywu
    EndPrimitive();
}
