//////////////////////////////////////////////////////////////////////
// (c) Janusz Ganczarski
// http://www.januszg.hg.pl
// JanuszG@enter.net.pl
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// GLSL 1.50
//////////////////////////////////////////////////////////////////////
#version 150

//////////////////////////////////////////////////////////////////////
// liczba warstw renderingu
//////////////////////////////////////////////////////////////////////
const int FRAME_LAYERS = 1;

//////////////////////////////////////////////////////////////////////
// tablica tekstur 2D
//////////////////////////////////////////////////////////////////////
uniform sampler2DArray tex;
uniform int texnr;
//////////////////////////////////////////////////////////////////////
// interpolowane wsp��rz�dne tekstury
//////////////////////////////////////////////////////////////////////
in vec2 inoutTexCoord;

//////////////////////////////////////////////////////////////////////
// wyj�ciowy kolor fragmentu
//////////////////////////////////////////////////////////////////////
out vec4 outColor;

//////////////////////////////////////////////////////////////////////
// program g��wny
//////////////////////////////////////////////////////////////////////
void main()
{
    // pocz�tkowy kolor fragmentu
    outColor = vec4( 0.0 );

    // przetwarzanie kolejnych warstw tablicy tekstur
  for( int layer = 0; layer < FRAME_LAYERS; layer++ )
    {
        outColor += (FRAME_LAYERS - layer) * texture( tex, vec3( inoutTexCoord, layer ) );
  // outColor += 1.0/32 * texture( tex, vec3( inoutTexCoord, layer ) );
    
    }
		
    // normalizacja warto�ci sk�adowych koloru fragmentu
    outColor /= outColor.a;
}
